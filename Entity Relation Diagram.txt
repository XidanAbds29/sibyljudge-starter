// DBML schema for dbdiagram.io

Table User {
  user_id int [pk, increment]
  username varchar(50) [not null]
  email varchar(100) [not null]
  password_hash text [not null]
  created_at datetime [default: `CURRENT_TIMESTAMP`]
  institution varchar(100)
  bio varchar(100)
   is_admin      boolean   [not null, default: false] 
}

Table Online_judge {
  judge_id int [pk, increment]
  name varchar(100) [not null]
  api_based_url text
}

Table Problem {
  problem_id int [pk, increment]
  source_oj_id int [not null]
  external_id varchar(100) [not null]
  title varchar(200) [not null]
  url text
  difficulty varchar(20)
  time_limit int [not null]
  mem_limit int [not null]
  fetched_at datetime [default: `CURRENT_TIMESTAMP`]
}

Table Tag {
  tag_id int [pk, increment]
  name varchar(100) [not null, unique]
}

Table Problem_tag {
  problem_id int [pk]
  tag_id int [pk]
}

Table Submission {
  submission_id int [pk, increment]
  user_id int [not null]
  problem_id int [not null]
  language varchar(50)
  status varchar(50)
  exec_time float
  submitted_at datetime [default: `CURRENT_TIMESTAMP`]
  verdict_detail text
}

Table Contest {
  contest_id int [pk, increment]
  
  name varchar(200) [not null]
  password_hash text
  start_time datetime
  end_time datetime

  is_virtual boolean [default: false]
  is_secured boolean [default :false]
  difficulty varchar(50)
  description varchar(1000)
}

Table Contest_problem {
  contest_id int [pk]
  problem_id int [pk]
  alias varchar(50)
}

Table Contest_submission {
  conprob_id int [pk, increment]
  contest_id int [not null]
  submission_id int [not null]
}

Table User_rating {
  user_id int [pk]
  contest_id int [pk]
  rating_performance int
  
}

Table Group {
  group_id int [pk, increment]
  
  name varchar(100) [not null]
  description text
  created_at datetime [default: `CURRENT_TIMESTAMP`]
  is_private     boolean  [not null, default: false]  
  password_hash  text                             
}

Table Group_member {
  group_member_id int [pk, increment]
  group_id int [not null]
  user_id int [not null]
  joined_at datetime [default: `CURRENT_TIMESTAMP`]
  role             varchar  [not null, default: 'member'] 
}

Table Discussion_thread {
  dissthread_id int [pk, increment]
  created_by int [not null]
  title varchar(200) [not null]
  thread_type varchar(50)
  reference_id int
  created_at datetime [default: `CURRENT_TIMESTAMP`]
}

Table Discussion_post {
  disspost_id int [pk, increment]
  dissthread_id int [not null]
  user_id int [not null]
  content text
  posted_at datetime [default: `CURRENT_TIMESTAMP`]
}

Table Problem_Editorial {
  probed_id int [pk, increment]
  problem_id int [not null]
  created_by int [not null]
  content text
  status       varchar   [not null, default: 'draft']
  created_at datetime [default: `CURRENT_TIMESTAMP`]
  updated_at datetime
}
Table Editorial_Approval {                                   
  approval_id  int       [pk, increment]                     
  probed_id    int       [not null, ref: > Problem_Editorial.probed_id]   
  approved_by  int       [not null, ref: > User.user_id]     
  approved_at  datetime  [default: `CURRENT_TIMESTAMP`]      
}


Table Badge {
  badge_id int [pk, increment]
  name varchar(100) [not null]
  icon_url text
  description text
}

Table User_badge {
  badge_id int [pk]
  user_id int [pk]
  awarded_at datetime [default: `CURRENT_TIMESTAMP`]
}

Table Follow {
  follower_id int [pk]
  followee_id int [pk]
  awarded_at datetime [default: `CURRENT_TIMESTAMP`]
}

Table Recommendation {
  user_id int [pk]
  problem_id int [pk]
  score float
  generated_at datetime [default: `CURRENT_TIMESTAMP`]
}

Table Track {
  track_id int [pk, increment]
  name varchar(100) [not null]
  description text
  generated_at datetime [default: `CURRENT_TIMESTAMP`]
   created_by    int       [not null, ref: > User.user_id] 

}

Table Track_problem {
  track_id int [pk]
  problem_id int [pk]
  ordinal int

  uploaded_by   int       [not null, ref: > User.user_id]   
  uploaded_at   datetime  [default: `CURRENT_TIMESTAMP`]    
}

Table User_track_progress {
  user_id int [pk]
  track_id int [pk]
  status varchar(50)
  updated_at datetime [default: `CURRENT_TIMESTAMP`]
}

Table Contest_creation {
  creation_id int [pk, increment]
  created_by int [not null]
  contest_id int [not null]
}

Table User_participant {
  user_participant_id int [pk, increment]
  contest_id int [not null]
  user_id int [not null]
  joined_at datetime [default: `CURRENT_TIMESTAMP`]
}

Table Group_creation {
  grp_crt_id int [pk, increment]
  created_by int [not null]
  group_id int [not null]
}

Table Fav_prob {
  fav_prob_id int [pk, increment]
  user_id int [not null]
   problem_id int [not null] 
}


Table Notification {
  notification_id  int       [pk, increment]
  user_id          int       [not null, ref: > User.user_id]
  type             varchar   [not null]            // e.g. "recommendation", "contest_start", "track_update"
  reference_id     int                           // polymorphic FK: problem_id, contest_id, track_id, etc.
  title            varchar   [not null]            // short headline
  message          text      [not null]            // detailed content
  is_read          boolean   [default: false]
  created_at       datetime  [default: `CURRENT_TIMESTAMP`]
  read_at          datetime
  group_id         int      [ref: > "Group".group_id] 



}
Table Personal_Record {                    
  record_id        int       [pk, increment]  
  user_id          int       [not null, ref: > User.user_id]    
  problem_id       int       [not null, ref: > Problem.problem_id]  
  status           varchar   [not null, default: 'attempted']    
    // 'attempted', 'solved'
  attempts_count   int       [not null, default: 0]            
  first_attempted  datetime  [default: `CURRENT_TIMESTAMP`]    
  last_attempted   datetime                                  
  solved_at        datetime                                  
  
  indexes {
    (user_id, problem_id) [unique]                           
  }
}
// References
Ref: Problem.source_oj_id > Online_judge.judge_id
Ref: Problem_tag.problem_id > Problem.problem_id
Ref: Problem_tag.tag_id > Tag.tag_id
Ref: Submission.user_id > User.user_id
Ref: Submission.problem_id > Problem.problem_id
Ref: Contest_problem.contest_id > Contest.contest_id
Ref: Contest_problem.problem_id > Problem.problem_id
Ref: Contest_submission.contest_id > Contest.contest_id
Ref: Contest_submission.submission_id > Submission.submission_id
Ref: User_rating.user_id > User.user_id
Ref: User_rating.contest_id > Contest.contest_id
Ref: Group_member.group_id > Group.group_id
Ref: Group_member.user_id > User.user_id
Ref: Discussion_thread.created_by > User.user_id
Ref: Discussion_post.dissthread_id > Discussion_thread.dissthread_id
Ref: Discussion_post.user_id > User.user_id
Ref: Problem_Editorial.problem_id > Problem.problem_id
Ref: Problem_Editorial.created_by > User.user_id
Ref: User_badge.badge_id > Badge.badge_id
Ref: User_badge.user_id > User.user_id
Ref: Follow.follower_id > User.user_id
Ref: Follow.followee_id > User.user_id
Ref: Recommendation.user_id > User.user_id
Ref: Recommendation.problem_id > Problem.problem_id
Ref: Track_problem.track_id > Track.track_id
Ref: Track_problem.problem_id > Problem.problem_id
Ref: User_track_progress.user_id > User.user_id
Ref: User_track_progress.track_id > Track.track_id
Ref: Contest_creation.created_by > User.user_id
Ref: Contest_creation.contest_id > Contest.contest_id
Ref: User_participant.contest_id > Contest.contest_id
Ref: User_participant.user_id > User.user_id
Ref: Group_creation.created_by > User.user_id
Ref: Group_creation.group_id > Group.group_id
Ref: Fav_prob.user_id> User.user_id 
Ref:  Fav_prob.problem_id >Problem.problem_id





