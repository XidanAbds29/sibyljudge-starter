const jwt = require('jsonwebtoken');
const { createClient } = require("@supabase/supabase-js");

// Initialize Supabase client for backend operations
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

// JWT secret key - should be in environment variables in production
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

const authenticateToken = async (req, res, next) => {
  try {
    // Get token from Authorization header
    const authHeader = req.headers.authorization;
    if (!authHeader?.startsWith("Bearer ")) {
      return res.status(401).json({
        error: "Authentication required: Bearer token required",
      });
    }

    const token = authHeader.substring(7); // Remove 'Bearer ' from header
    if (!token) {
      return res.status(401).json({
        error: "Authentication required: No token provided",
      });
    }

    // Verify JWT token
    const decoded = jwt.verify(token, JWT_SECRET);

    // Get user from Supabase to ensure they still exist and are valid
    const { data: { user }, error } = await supabase.auth.admin.getUserById(decoded.id);

    if (error || !user) {
      console.error("Auth error:", error);
      return res.status(401).json({
        error: "Authentication failed: Invalid token",
      });
    }

    // Attach user object to request for use in route handlers
    req.user = {
      ...user,
      id: decoded.id
    };

    next();
  } catch (err) {
    console.error("Auth error:", err);
    return res.status(401).json({
      error: "Authentication failed: " + (err.message || "Invalid token"),
    });
  }
};

module.exports = { authenticateToken, JWT_SECRET, supabase };
