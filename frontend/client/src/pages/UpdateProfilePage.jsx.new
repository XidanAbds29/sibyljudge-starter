import React, { useState, useRef, useEffect } from "react";
import { useAuth } from "../components/AuthContext";
import { useNavigate } from "react-router-dom";
import { profileApi } from "../services/profileApi";

function NeonGlowSVG({ className = "", style = {}, ...props }) {
  return (
    <svg
      className={"absolute pointer-events-none z-0 " + className}
      style={style}
      width="100%"
      height="100%"
      viewBox="0 0 1440 200"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      preserveAspectRatio="none"
      {...props}
    >
      <defs>
        <radialGradient id="neon-glow-update-profile" cx="50%" cy="50%" r="50%">
          <stop offset="0%" stopColor="#ec4899" stopOpacity="0.5" />
          <stop offset="100%" stopColor="#ec4899" stopOpacity="0" />
        </radialGradient>
      </defs>
      <ellipse
        cx="720"
        cy="100"
        rx="700"
        ry="60"
        fill="url(#neon-glow-update-profile)"
      />
    </svg>
  );
}

const UpdateProfilePage = () => {
  const { user, setUser } = useAuth();
  const navigate = useNavigate();
  const [form, setForm] = useState({
    username: user?.username || "",
    email: user?.email || "",
    institution: user?.institution || "",
    bio: user?.bio || "",
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);
  const containerRef = useRef(null);

  useEffect(() => {
    if (containerRef.current) {
      import("gsap").then(({ gsap }) => {
        gsap.fromTo(
          containerRef.current,
          { opacity: 0, y: 40, filter: "blur(10px)" },
          {
            opacity: 1,
            y: 0,
            filter: "blur(0px)",
            duration: 1.1,
            ease: "power4.out",
          }
        );
      });
    }
  }, []);

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSave = async () => {
    // Validate form
    if (!form.username.trim()) {
      setError("Username is required");
      return;
    }

    setLoading(true);
    setError(null);
    setSuccess(null);

    try {
      // Update profile through our API
      const { profile } = await profileApi.updateProfile({
        username: form.username.trim(),
        institution: form.institution.trim(),
        bio: form.bio.trim()
      });

      // Update local user state
      setUser(current => ({
        ...current,
        ...profile
      }));

      setSuccess("Profile updated successfully!");
      
      // Optional: Navigate back or to profile page
      // navigate("/profile");
    } catch (err) {
      console.error("Error updating profile:", err);
      setError(err.message || "Failed to update profile");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-900 text-white relative overflow-hidden">
      <div className="container mx-auto px-4 py-8" ref={containerRef}>
        <NeonGlowSVG className="top-0 left-0" />
        <div className="max-w-2xl mx-auto relative">
          <div className="bg-gray-800 rounded-lg p-6 shadow-lg border border-pink-500/20">
            <h1 className="text-3xl font-bold mb-6 text-transparent bg-clip-text bg-gradient-to-r from-pink-500 to-violet-500">
              Update Profile
            </h1>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-1 text-gray-300">
                  Username
                </label>
                <input
                  type="text"
                  name="username"
                  value={form.username}
                  onChange={handleChange}
                  className="w-full px-3 py-2 bg-gray-700 rounded-md border border-gray-600 focus:border-pink-500 focus:ring-1 focus:ring-pink-500 text-white"
                  placeholder="Enter username"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-1 text-gray-300">
                  Email
                </label>
                <input
                  type="email"
                  name="email"
                  value={form.email}
                  disabled
                  className="w-full px-3 py-2 bg-gray-700/50 rounded-md border border-gray-600 text-gray-400 cursor-not-allowed"
                />
                <p className="mt-1 text-sm text-gray-400">
                  Email cannot be changed
                </p>
              </div>

              <div>
                <label className="block text-sm font-medium mb-1 text-gray-300">
                  Institution
                </label>
                <input
                  type="text"
                  name="institution"
                  value={form.institution}
                  onChange={handleChange}
                  className="w-full px-3 py-2 bg-gray-700 rounded-md border border-gray-600 focus:border-pink-500 focus:ring-1 focus:ring-pink-500 text-white"
                  placeholder="Enter your institution"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-1 text-gray-300">
                  Bio
                </label>
                <textarea
                  name="bio"
                  value={form.bio}
                  onChange={handleChange}
                  rows="4"
                  className="w-full px-3 py-2 bg-gray-700 rounded-md border border-gray-600 focus:border-pink-500 focus:ring-1 focus:ring-pink-500 text-white resize-none"
                  placeholder="Tell us about yourself"
                />
              </div>

              {error && (
                <div className="p-3 bg-red-500/20 border border-red-500/50 rounded text-red-200 text-sm">
                  {error}
                </div>
              )}

              {success && (
                <div className="p-3 bg-green-500/20 border border-green-500/50 rounded text-green-200 text-sm">
                  {success}
                </div>
              )}

              <div className="flex gap-4">
                <button
                  onClick={() => navigate(-1)}
                  className="px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-md transition-colors"
                >
                  Cancel
                </button>
                <button
                  onClick={handleSave}
                  disabled={loading}
                  className="px-4 py-2 bg-gradient-to-r from-pink-500 to-violet-500 rounded-md hover:from-pink-600 hover:to-violet-600 transition-colors flex items-center disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {loading ? (
                    <>
                      <svg
                        className="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                      >
                        <circle
                          className="opacity-25"
                          cx="12"
                          cy="12"
                          r="10"
                          stroke="currentColor"
                          strokeWidth="4"
                        ></circle>
                        <path
                          className="opacity-75"
                          fill="currentColor"
                          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                        ></path>
                      </svg>
                      Saving...
                    </>
                  ) : (
                    "Save Changes"
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default UpdateProfilePage;
