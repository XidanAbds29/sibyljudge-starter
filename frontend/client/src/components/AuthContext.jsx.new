// frontend/client/src/components/AuthContext.jsx
import React, { createContext, useState, useEffect, useContext } from "react";
import { authApi } from "../services/api";

const AuthContext = createContext({
  user: null,
  loading: true,
  signUp: async () => {},
  signIn: async () => {},
  signOut: async () => {},
});

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    let mounted = true;

    const initializeAuth = async () => {
      // Check if we have a token
      const token = localStorage.getItem('auth-token');
      if (!token) {
        setLoading(false);
        if (window.location.pathname !== '/login') {
          window.location.replace('/login');
        }
        return;
      }

      try {
        // Verify token and get user data
        const { user: currentUser } = await authApi.getCurrentUser();
        if (!mounted) return;

        setUser(currentUser);
      } catch (error) {
        console.error('Auth initialization error:', error);
        localStorage.removeItem('auth-token');
        if (window.location.pathname !== '/login') {
          window.location.replace('/login');
        }
      } finally {
        if (mounted) {
          setLoading(false);
        }
      }
    };

    initializeAuth();

    return () => {
      mounted = false;
    };
  }, []);

  const signUp = async (credentials) => {
    try {
      const { token, user: newUser } = await authApi.signUp(
        credentials.email,
        credentials.password,
        credentials.username
      );

      localStorage.setItem('auth-token', token);
      setUser(newUser);
      window.location.replace('/');
      
      return { error: null };
    } catch (error) {
      console.error('Sign up error:', error);
      return { error };
    }
  };

  const signIn = async (credentials) => {
    try {
      const { token, user: newUser } = await authApi.signIn(
        credentials.email,
        credentials.password
      );

      localStorage.setItem('auth-token', token);
      setUser(newUser);
      window.location.replace('/');

      return { error: null };
    } catch (error) {
      console.error('Sign in error:', error);
      return { error };
    }
  };

  const signOut = async () => {
    try {
      await authApi.signOut();
      localStorage.removeItem('auth-token');
      setUser(null);
      window.location.replace('/login');
      
      return { error: null };
    } catch (error) {
      console.error('Sign out error:', error);
      return { error };
    }
  };

  const value = {
    user,
    loading,
    signUp,
    signIn,
    signOut,
  };

  const isAuthenticated = !!user;
  const isLoginPage = window.location.pathname === '/login';
  const shouldShowContent = (!loading && (isAuthenticated || isLoginPage)) || (loading && user);

  return (
    <AuthContext.Provider value={value}>
      {shouldShowContent ? (
        children
      ) : (
        <div className="min-h-screen flex items-center justify-center bg-gray-950 text-cyan-400">
          <div className="flex flex-col items-center gap-3">
            <div className="animate-spin h-8 w-8 border-4 border-cyan-400 rounded-full border-t-transparent"></div>
            <div className="text-lg flex flex-col items-center gap-1">
              <div>{loading ? "Verifying session..." : "Redirecting..."}</div>
              {user && (
                <div className="text-sm text-cyan-300">{user.email}</div>
              )}
            </div>
          </div>
        </div>
      )}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export default AuthContext;
